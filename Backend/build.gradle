plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.google.protobuf' version '0.9.3' 
}

group = 'com.example'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'io.grpc:grpc-netty:1.57.2'
    implementation 'io.grpc:grpc-protobuf:1.57.2'
    implementation 'io.grpc:grpc-stub:1.57.2'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.protobuf:protobuf-java:3.23.4'
    implementation 'net.devh:grpc-server-spring-boot-starter:2.14.0.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.postgresql:postgresql'
    implementation 'io.grpc:grpc-netty:1.57.2'
    implementation 'io.grpc:grpc-protobuf:1.57.2'
    implementation 'io.grpc:grpc-stub:1.57.2'
    implementation 'io.grpc:grpc-netty-shaded:1.57.2'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'io.micrometer:micrometer-registry-new-relic'
    implementation 'org.postgresql:postgresql:42.7.4' // Replace with the latest version
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.23.4"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.69.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
        }
    }
}

// Include generated Protobuf files in the main source set
sourceSets {
    main {
        java {
            srcDirs += "${protobuf.generatedFilesBaseDir}/main/java"
            srcDirs += "${protobuf.generatedFilesBaseDir}/main/grpc"
        }
    }
}

// Ensure `generateProto` runs before `compileJava`
tasks.named('compileJava') {
    dependsOn tasks.named('generateProto')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

jar {
    enabled = true
    archiveBaseName.set('FlightFlex')
    archiveVersion.set('1.0.0')
}
